// Code generated by mockery v2.14.0. DO NOT EDIT.

package events

import mock "github.com/stretchr/testify/mock"

// MockEvent is an autogenerated mock type for the Event type
type MockEvent[Visitor interface{}] struct {
	mock.Mock
}

type MockEvent_Expecter[Visitor interface{}] struct {
	mock *mock.Mock
}

func (_m *MockEvent[Visitor]) EXPECT() *MockEvent_Expecter[Visitor] {
	return &MockEvent_Expecter[Visitor]{mock: &_m.Mock}
}

// Accept provides a mock function with given fields: visitor
func (_m *MockEvent[Visitor]) Accept(visitor Visitor) error {
	ret := _m.Called(visitor)

	var r0 error
	if rf, ok := ret.Get(0).(func(Visitor) error); ok {
		r0 = rf(visitor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEvent_Accept_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Accept'
type MockEvent_Accept_Call[Visitor interface{}] struct {
	*mock.Call
}

// Accept is a helper method to define mock.On call
//  - visitor Visitor
func (_e *MockEvent_Expecter[Visitor]) Accept(visitor interface{}) *MockEvent_Accept_Call[Visitor] {
	return &MockEvent_Accept_Call[Visitor]{Call: _e.mock.On("Accept", visitor)}
}

func (_c *MockEvent_Accept_Call[Visitor]) Run(run func(visitor Visitor)) *MockEvent_Accept_Call[Visitor] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Visitor))
	})
	return _c
}

func (_c *MockEvent_Accept_Call[Visitor]) Return(_a0 error) *MockEvent_Accept_Call[Visitor] {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewMockEvent interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEvent creates a new instance of MockEvent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEvent[Visitor interface{}](t mockConstructorTestingTNewMockEvent) *MockEvent[Visitor] {
	mock := &MockEvent[Visitor]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
