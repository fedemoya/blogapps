// Code generated by mockery v2.14.0. DO NOT EDIT.

package main

import mock "github.com/stretchr/testify/mock"

// MockEventsDeserializer is an autogenerated mock type for the EventsDeserializer type
type MockEventsDeserializer[Visitor interface{}] struct {
	mock.Mock
}

type MockEventsDeserializer_Expecter[Visitor interface{}] struct {
	mock *mock.Mock
}

func (_m *MockEventsDeserializer[Visitor]) EXPECT() *MockEventsDeserializer_Expecter[Visitor] {
	return &MockEventsDeserializer_Expecter[Visitor]{mock: &_m.Mock}
}

// Deserialize provides a mock function with given fields: message
func (_m *MockEventsDeserializer[Visitor]) Deserialize(message Message) (Event[Visitor], error) {
	ret := _m.Called(message)

	var r0 Event[Visitor]
	if rf, ok := ret.Get(0).(func(Message) Event[Visitor]); ok {
		r0 = rf(message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Event[Visitor])
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(Message) error); ok {
		r1 = rf(message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventsDeserializer_Deserialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deserialize'
type MockEventsDeserializer_Deserialize_Call[Visitor interface{}] struct {
	*mock.Call
}

// Deserialize is a helper method to define mock.On call
//  - message Message
func (_e *MockEventsDeserializer_Expecter[Visitor]) Deserialize(message interface{}) *MockEventsDeserializer_Deserialize_Call[Visitor] {
	return &MockEventsDeserializer_Deserialize_Call[Visitor]{Call: _e.mock.On("Deserialize", message)}
}

func (_c *MockEventsDeserializer_Deserialize_Call[Visitor]) Run(run func(message Message)) *MockEventsDeserializer_Deserialize_Call[Visitor] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Message))
	})
	return _c
}

func (_c *MockEventsDeserializer_Deserialize_Call[Visitor]) Return(_a0 Event[Visitor], _a1 error) *MockEventsDeserializer_Deserialize_Call[Visitor] {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewMockEventsDeserializer interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEventsDeserializer creates a new instance of MockEventsDeserializer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEventsDeserializer[Visitor interface{}](t mockConstructorTestingTNewMockEventsDeserializer) *MockEventsDeserializer[Visitor] {
	mock := &MockEventsDeserializer[Visitor]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
