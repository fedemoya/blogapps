// Code generated by mockery v2.14.0. DO NOT EDIT.

package main

import mock "github.com/stretchr/testify/mock"

// MockMessageConsumer is an autogenerated mock type for the MessageConsumer type
type MockMessageConsumer struct {
	mock.Mock
}

type MockMessageConsumer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMessageConsumer) EXPECT() *MockMessageConsumer_Expecter {
	return &MockMessageConsumer_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockMessageConsumer) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMessageConsumer_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockMessageConsumer_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockMessageConsumer_Expecter) Close() *MockMessageConsumer_Close_Call {
	return &MockMessageConsumer_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockMessageConsumer_Close_Call) Run(run func()) *MockMessageConsumer_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessageConsumer_Close_Call) Return(_a0 error) *MockMessageConsumer_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

// Consume provides a mock function with given fields:
func (_m *MockMessageConsumer) Consume() (<-chan Message, error) {
	ret := _m.Called()

	var r0 <-chan Message
	if rf, ok := ret.Get(0).(func() <-chan Message); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMessageConsumer_Consume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Consume'
type MockMessageConsumer_Consume_Call struct {
	*mock.Call
}

// Consume is a helper method to define mock.On call
func (_e *MockMessageConsumer_Expecter) Consume() *MockMessageConsumer_Consume_Call {
	return &MockMessageConsumer_Consume_Call{Call: _e.mock.On("Consume")}
}

func (_c *MockMessageConsumer_Consume_Call) Run(run func()) *MockMessageConsumer_Consume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessageConsumer_Consume_Call) Return(_a0 <-chan Message, _a1 error) *MockMessageConsumer_Consume_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewMockMessageConsumer interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockMessageConsumer creates a new instance of MockMessageConsumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockMessageConsumer(t mockConstructorTestingTNewMockMessageConsumer) *MockMessageConsumer {
	mock := &MockMessageConsumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
