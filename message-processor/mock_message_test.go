// Code generated by mockery v2.14.0. DO NOT EDIT.

package main

import mock "github.com/stretchr/testify/mock"

// MockMessage is an autogenerated mock type for the Message type
type MockMessage struct {
	mock.Mock
}

type MockMessage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMessage) EXPECT() *MockMessage_Expecter {
	return &MockMessage_Expecter{mock: &_m.Mock}
}

// Ack provides a mock function with given fields:
func (_m *MockMessage) Ack() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMessage_Ack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ack'
type MockMessage_Ack_Call struct {
	*mock.Call
}

// Ack is a helper method to define mock.On call
func (_e *MockMessage_Expecter) Ack() *MockMessage_Ack_Call {
	return &MockMessage_Ack_Call{Call: _e.mock.On("Ack")}
}

func (_c *MockMessage_Ack_Call) Run(run func()) *MockMessage_Ack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessage_Ack_Call) Return(_a0 error) *MockMessage_Ack_Call {
	_c.Call.Return(_a0)
	return _c
}

// Nack provides a mock function with given fields:
func (_m *MockMessage) Nack() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMessage_Nack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Nack'
type MockMessage_Nack_Call struct {
	*mock.Call
}

// Nack is a helper method to define mock.On call
func (_e *MockMessage_Expecter) Nack() *MockMessage_Nack_Call {
	return &MockMessage_Nack_Call{Call: _e.mock.On("Nack")}
}

func (_c *MockMessage_Nack_Call) Run(run func()) *MockMessage_Nack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessage_Nack_Call) Return(_a0 error) *MockMessage_Nack_Call {
	_c.Call.Return(_a0)
	return _c
}

// Payload provides a mock function with given fields:
func (_m *MockMessage) Payload() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// MockMessage_Payload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Payload'
type MockMessage_Payload_Call struct {
	*mock.Call
}

// Payload is a helper method to define mock.On call
func (_e *MockMessage_Expecter) Payload() *MockMessage_Payload_Call {
	return &MockMessage_Payload_Call{Call: _e.mock.On("Payload")}
}

func (_c *MockMessage_Payload_Call) Run(run func()) *MockMessage_Payload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessage_Payload_Call) Return(_a0 []byte) *MockMessage_Payload_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewMockMessage interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockMessage creates a new instance of MockMessage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockMessage(t mockConstructorTestingTNewMockMessage) *MockMessage {
	mock := &MockMessage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
